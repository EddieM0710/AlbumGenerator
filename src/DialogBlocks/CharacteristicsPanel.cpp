/////////////////////////////////////////////////////////////////////////////
// Name:        CharacteristicsPanel.cpp
// Purpose:     
// Author:      Eddie Monroe
// Modified by: 
// Created:     Sat 23 Apr 2022 14:51:54 CDT
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), Sat 23 Apr 2022 14:51:54 CDT

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
#include "LabeledTextBox.h"
////@end includes

#include "CharacteristicsPanel.h"

////@begin XPM images

////@end XPM images


/*
 * CharacteristicsPanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CharacteristicsPanel, wxPanel )


/*
 * CharacteristicsPanel event table definition
 */

BEGIN_EVENT_TABLE( CharacteristicsPanel, wxPanel )

////@begin CharacteristicsPanel event table entries
////@end CharacteristicsPanel event table entries

END_EVENT_TABLE()


/*
 * CharacteristicsPanel constructors
 */

CharacteristicsPanel::CharacteristicsPanel()
{
    Init();
}

CharacteristicsPanel::CharacteristicsPanel( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, pos, size, style);
}


/*
 * CharacteristicsPanel creator
 */

bool CharacteristicsPanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CharacteristicsPanel creation
    SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CharacteristicsPanel creation
    return true;
}


/*
 * CharacteristicsPanel destructor
 */

CharacteristicsPanel::~CharacteristicsPanel()
{
////@begin CharacteristicsPanel destruction
////@end CharacteristicsPanel destruction
}


/*
 * Member initialisation
 */

void CharacteristicsPanel::Init()
{
////@begin CharacteristicsPanel member initialisation
    m_faceValue = NULL;
    m_currency = NULL;
    m_height = NULL;
    m_width = NULL;
    m_perforation = NULL;
    m_watermark = NULL;
    m_gum = NULL;
    m_variant = NULL;
    m_colors = NULL;
    m_paper = NULL;
    m_printing = NULL;
    m_printRun = NULL;
    m_expiryDate = NULL;
////@end CharacteristicsPanel member initialisation
}


/*
 * Control creation for CharacteristicsPanel
 */

void CharacteristicsPanel::CreateControls()
{    
////@begin CharacteristicsPanel content construction
    // Generated by DialogBlocks, Sat 23 Apr 2022 14:51:54 CDT (unregistered)

    CharacteristicsPanel* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    itemPanel1->SetSizer(itemBoxSizer1);

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer1->Add(itemBoxSizer2, 1, wxGROW|wxALL, 5);

    m_faceValue = new LabeledTextBox( itemPanel1, ID_FACETEXTBOX, wxDefaultPosition, wxDefaultSize, wxDOUBLE_BORDER );
    itemBoxSizer2->Add(m_faceValue, 0, wxGROW|wxALL, 2);

    m_currency = new LabeledTextBox( itemPanel1, ID_CURRENCYTEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(m_currency, 0, wxGROW|wxALL, 2);

    m_height = new LabeledTextBox( itemPanel1, ID_HEIGHTEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(m_height, 0, wxGROW|wxALL, 2);

    m_width = new LabeledTextBox( itemPanel1, ID_WIDTHTEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(m_width, 0, wxGROW|wxALL, 2);

    wxContextHelpButton* itemContextHelpButton1 = new wxContextHelpButton( m_width, wxID_CONTEXT_HELP, wxDefaultPosition, wxSize(20, -1), wxBU_AUTODRAW );

    wxBoxSizer* itemBoxSizer7 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer1->Add(itemBoxSizer7, 1, wxGROW|wxALL, 5);

    m_perforation = new LabeledTextBox( itemPanel1, ID_PERFORATIONTEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer7->Add(m_perforation, 0, wxGROW|wxALL, 2);

    m_watermark = new LabeledTextBox( itemPanel1, ID_WATERMARKEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer7->Add(m_watermark, 0, wxGROW|wxALL, 2);

    m_gum = new LabeledTextBox( itemPanel1, ID_GUMTEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer7->Add(m_gum, 0, wxGROW|wxALL, 2);

    wxBoxSizer* itemBoxSizer11 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer1->Add(itemBoxSizer11, 1, wxGROW|wxALL, 5);

    m_variant = new LabeledTextBox( itemPanel1, ID_VARIANTTEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer11->Add(m_variant, 0, wxGROW|wxALL, 2);

    m_colors = new LabeledTextBox( itemPanel1, ID_COLORSTEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer11->Add(m_colors, 0, wxGROW|wxALL, 2);

    m_paper = new LabeledTextBox( itemPanel1, ID_PAPERTEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer11->Add(m_paper, 0, wxGROW|wxALL, 2);

    wxBoxSizer* itemBoxSizer15 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer1->Add(itemBoxSizer15, 1, wxGROW|wxALL, 5);

    m_printing = new LabeledTextBox( itemPanel1, ID_PRINTINGTEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer15->Add(m_printing, 0, wxGROW|wxALL, 2);

    m_printRun = new LabeledTextBox( itemPanel1, ID_PRINTRUNTEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer15->Add(m_printRun, 0, wxGROW|wxALL, 2);

    m_expiryDate = new LabeledTextBox( itemPanel1, ID_EXPIRYDATEEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer15->Add(m_expiryDate, 0, wxGROW|wxALL, 2);

////@end CharacteristicsPanel content construction
}


/*
 * Should we show tooltips?
 */

bool CharacteristicsPanel::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap CharacteristicsPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CharacteristicsPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CharacteristicsPanel bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CharacteristicsPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CharacteristicsPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CharacteristicsPanel icon retrieval
}

/////////////////////////////////////////////////////////////////////////////
// Name:        DescriptionPanel.cpp
// Purpose:     
// Author:      Eddie Monroe
// Modified by: 
// Created:     Sat 23 Apr 2022 13:03:23 CDT
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), Sat 23 Apr 2022 13:03:23 CDT

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
#include "IdentificationPanel.h"
#include "ImagePanel.h"
#include "wx/imaglist.h"
#include "InventoryPanel.h"
#include "CharacteristicsPanel.h"
#include "MiscellaneousDataPanel.h"
////@end includes

#include "DescriptionPanel.h"

////@begin XPM images

////@end XPM images


/*
 * DescriptionPanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( DescriptionPanel, wxPanel )


/*
 * DescriptionPanel event table definition
 */

BEGIN_EVENT_TABLE( DescriptionPanel, wxPanel )

////@begin DescriptionPanel event table entries
    EVT_SLIDER( ID_ZOOMSLIDER, DescriptionPanel::OnZoomsliderUpdated )
    EVT_TEXT( ID_DESCRIPTIONTEXTCTRL, DescriptionPanel::OnDescriptionTextctrlTextUpdated )
    EVT_TEXT( ID_BKGNDTEXTCTRL, DescriptionPanel::OnBkGndTextUpdated )
    EVT_TEXT_MAXLEN( ID_BKGNDTEXTCTRL, DescriptionPanel::OnBkgndtextctrlMaxLen )
////@end DescriptionPanel event table entries

END_EVENT_TABLE()


/*
 * DescriptionPanel constructors
 */

DescriptionPanel::DescriptionPanel()
{
    Init();
}

DescriptionPanel::DescriptionPanel( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, pos, size, style);
}


/*
 * DescriptionPanel creator
 */

bool DescriptionPanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin DescriptionPanel creation
    SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();

    if (FindWindow(ID_NOTEBOOKSPLITTERWINDOW))
        ((wxSplitterWindow*) FindWindow(ID_NOTEBOOKSPLITTERWINDOW))->SetSashPosition(200);
    if (FindWindow(ID_DESCRIPTIONSPLITTERWINDOW))
        ((wxSplitterWindow*) FindWindow(ID_DESCRIPTIONSPLITTERWINDOW))->SetSashPosition(250);
////@end DescriptionPanel creation
    return true;
}


/*
 * DescriptionPanel destructor
 */

DescriptionPanel::~DescriptionPanel()
{
////@begin DescriptionPanel destruction
////@end DescriptionPanel destruction
}


/*
 * Member initialisation
 */

void DescriptionPanel::Init()
{
////@begin DescriptionPanel member initialisation
    m_identifictionTab = NULL;
    m_zoomSlider = NULL;
    m_stampImage = NULL;
    m_inventoryPanel = NULL;
    m_characteristicsPanel = NULL;
    m_miscellaneousTab = NULL;
    m_description = NULL;
    m_bkgndText = NULL;
////@end DescriptionPanel member initialisation
}


/*
 * Control creation for DescriptionPanel
 */

void DescriptionPanel::CreateControls()
{    
////@begin DescriptionPanel content construction
    // Generated by DialogBlocks, Sat 23 Apr 2022 13:03:23 CDT (unregistered)

    DescriptionPanel* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(itemBoxSizer3, 3, wxGROW|wxALL, 0);

    wxSplitterWindow* itemSplitterWindow1 = new wxSplitterWindow( itemPanel1, ID_NOTEBOOKSPLITTERWINDOW, wxDefaultPosition, wxSize(100, 100), wxSP_3DBORDER|wxSP_3DSASH|wxNO_BORDER );
    itemSplitterWindow1->SetMinimumPaneSize(100);
    itemSplitterWindow1->SetSashGravity(0.2);

    wxSplitterWindow* itemSplitterWindow2 = new wxSplitterWindow( itemSplitterWindow1, ID_DESCRIPTIONSPLITTERWINDOW, wxDefaultPosition, wxSize(100, 100), wxSP_3DBORDER|wxSP_3DSASH|wxNO_BORDER );
    itemSplitterWindow2->SetMinimumPaneSize(100);
    itemSplitterWindow2->SetSashGravity(0.2);

    m_identifictionTab = new IdentificationPanel( itemSplitterWindow2, ID_IDENTIFICATIONPANELFORIEGN, wxDefaultPosition, wxDefaultSize, 0 );

    wxPanel* itemPanel4 = 
        new wxPanel( itemSplitterWindow2, ID_PANEL, wxDefaultPosition,
        wxDefaultSize, wxTAB_TRAVERSAL );
    itemPanel4->SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxVERTICAL);
    itemPanel4->SetSizer(itemBoxSizer5);

    wxBoxSizer* itemBoxSizer6 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer5->Add(itemBoxSizer6, 1, wxGROW|wxALL, 5);
    wxBoxSizer* itemBoxSizer7 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer6->Add(itemBoxSizer7, 1, wxGROW|wxALL, 5);
    wxBoxSizer* itemBoxSizer8 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer7->Add(itemBoxSizer8, 0, wxGROW|wxALL, 0);
    wxStaticText* itemStaticText9 = new wxStaticText( itemPanel4, wxID_STATIC, _("Zoom"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer8->Add(itemStaticText9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_zoomSlider = new wxSlider( itemPanel4, ID_ZOOMSLIDER, 100, 25, 300, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL );
    itemBoxSizer8->Add(m_zoomSlider, 1, wxGROW|wxALL, 0);

    m_stampImage = 
    new ImagePanel( itemPanel4, ID_STAMPIMAGEPANEL, wxDefaultPosition, 
        wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL );
    m_stampImage->SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    itemBoxSizer7->Add(m_stampImage, 1, wxGROW|wxALL, 0);

    itemSplitterWindow2->SplitVertically(m_identifictionTab, itemPanel4, 250);
    wxNotebook* itemNotebook12 = new wxNotebook( itemSplitterWindow1, ID_NOTEBOOK, wxDefaultPosition, wxDefaultSize, wxBK_DEFAULT );

    m_inventoryPanel = new InventoryPanel( itemNotebook12, ID_INVENTORYFOREIGN, wxDefaultPosition, wxSize(100, 100), wxSIMPLE_BORDER );

    itemNotebook12->AddPage(m_inventoryPanel, _("Inventory"));

    m_characteristicsPanel = new CharacteristicsPanel( itemNotebook12, ID_CHARACTERISTICSWINDOW, wxDefaultPosition, wxSize(100, 100), wxSIMPLE_BORDER );

    itemNotebook12->AddPage(m_characteristicsPanel, _("Characteristics"));

    m_miscellaneousTab = new MiscellaneousDataPanel( itemNotebook12, ID_MISCELLANEOUSDATAFORIEGN, wxDefaultPosition, wxDefaultSize, wxSIMPLE_BORDER|wxTAB_TRAVERSAL );
    m_miscellaneousTab->SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);

    itemNotebook12->AddPage(m_miscellaneousTab, _("Miscellaneous"));

    wxScrolledWindow* itemScrolledWindow1 = new wxScrolledWindow( itemNotebook12, ID_DESCRIPTIONSCROLLEDWINDOW, wxDefaultPosition, wxDefaultSize, wxSIMPLE_BORDER|wxHSCROLL|wxVSCROLL );
    itemScrolledWindow1->SetScrollbars(1, 1, 0, 0);
    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    itemScrolledWindow1->SetSizer(itemBoxSizer4);

    wxBoxSizer* itemBoxSizer9 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer4->Add(itemBoxSizer9, 1, wxGROW|wxALL, 0);
    m_description = new wxTextCtrl( itemScrolledWindow1, ID_DESCRIPTIONTEXTCTRL, wxEmptyString, wxDefaultPosition, wxSize(-1, 100), wxTE_MULTILINE );
    itemBoxSizer9->Add(m_description, 1, wxGROW|wxALL, 0);

    itemScrolledWindow1->FitInside();
    itemNotebook12->AddPage(itemScrolledWindow1, _("Description"));

    wxPanel* itemPanel16 = new wxPanel( itemNotebook12, ID_BACKGROUNDPANEL1, wxDefaultPosition, wxDefaultSize, wxSIMPLE_BORDER|wxTAB_TRAVERSAL );
    itemPanel16->SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    wxBoxSizer* itemBoxSizer17 = new wxBoxSizer(wxVERTICAL);
    itemPanel16->SetSizer(itemBoxSizer17);

    wxScrolledWindow* itemScrolledWindow19 = new wxScrolledWindow( itemPanel16, ID_BKGNDSCROLLEDWINDOW, wxDefaultPosition, wxSize(100, -1), wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    itemBoxSizer17->Add(itemScrolledWindow19, 1, wxGROW|wxALL, 0);
    itemScrolledWindow19->SetScrollbars(1, 1, 0, 0);
    wxBoxSizer* itemBoxSizer20 = new wxBoxSizer(wxHORIZONTAL);
    itemScrolledWindow19->SetSizer(itemBoxSizer20);

    wxBoxSizer* itemBoxSizer21 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer20->Add(itemBoxSizer21, 1, wxGROW|wxALL, 0);
    m_bkgndText = new wxTextCtrl( itemScrolledWindow19, ID_BKGNDTEXTCTRL, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE );
    itemBoxSizer21->Add(m_bkgndText, 1, wxGROW|wxALL, 5);

    itemScrolledWindow19->FitInside();

    itemNotebook12->AddPage(itemPanel16, _("Background"));

    itemSplitterWindow1->SplitHorizontally(itemSplitterWindow2, itemNotebook12, 200);
    itemBoxSizer3->Add(itemSplitterWindow1, 1, wxGROW|wxALL, 5);


    // Connect events and objects
    m_bkgndText->Connect(ID_BKGNDTEXTCTRL, wxEVT_LEAVE_WINDOW, wxMouseEventHandler(DescriptionPanel::OnLeaveWindow), NULL, this);
////@end DescriptionPanel content construction
}


/*
 * wxEVT_COMMAND_SLIDER_UPDATED event handler for ID_ZOOMSLIDER
 */

void DescriptionPanel::OnZoomsliderUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_SLIDER_UPDATED event handler for ID_ZOOMSLIDER in DescriptionPanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_SLIDER_UPDATED event handler for ID_ZOOMSLIDER in DescriptionPanel. 
}


/*
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_DESCRIPTIONTEXTCTRL
 */

void DescriptionPanel::OnDescriptionTextctrlTextUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_DESCRIPTIONTEXTCTRL in DescriptionPanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_DESCRIPTIONTEXTCTRL in DescriptionPanel. 
}


/*
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_BKGNDTEXTCTRL
 */

void DescriptionPanel::OnBkGndTextUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_BKGNDTEXTCTRL in DescriptionPanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_BKGNDTEXTCTRL in DescriptionPanel. 
}


/*
 * wxEVT_COMMAND_TEXT_MAXLEN event handler for ID_BKGNDTEXTCTRL
 */

void DescriptionPanel::OnBkgndtextctrlMaxLen( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_MAXLEN event handler for ID_BKGNDTEXTCTRL in DescriptionPanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_MAXLEN event handler for ID_BKGNDTEXTCTRL in DescriptionPanel. 
}


/*
 * wxEVT_LEAVE_WINDOW event handler for ID_BKGNDTEXTCTRL
 */

void DescriptionPanel::OnLeaveWindow( wxMouseEvent& event )
{
////@begin wxEVT_LEAVE_WINDOW event handler for ID_BKGNDTEXTCTRL in DescriptionPanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_LEAVE_WINDOW event handler for ID_BKGNDTEXTCTRL in DescriptionPanel. 
}


/*
 * Should we show tooltips?
 */

bool DescriptionPanel::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap DescriptionPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin DescriptionPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end DescriptionPanel bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon DescriptionPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin DescriptionPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end DescriptionPanel icon retrieval
}

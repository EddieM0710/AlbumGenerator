/////////////////////////////////////////////////////////////////////////////
// Name:        IdentificationPanel.cpp
// Purpose:     
// Author:      Eddie Monroe
// Modified by: 
// Created:     Sat 23 Apr 2022 14:51:45 CDT
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), Sat 23 Apr 2022 14:51:45 CDT

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
#include "LabeledTextBox.h"
////@end includes

#include "IdentificationPanel.h"

////@begin XPM images

////@end XPM images


/*
 * IdentificationPanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( IdentificationPanel, wxPanel )


/*
 * IdentificationPanel event table definition
 */

BEGIN_EVENT_TABLE( IdentificationPanel, wxPanel )

////@begin IdentificationPanel event table entries
    EVT_CHOICE( ID_STATUSCHOICE, IdentificationPanel::OnStatuschoiceSelected )
    EVT_CHOICE( ID_EMISSIONCHOICE, IdentificationPanel::OnEmissionchoiceSelected )
    EVT_CHOICE( ID_FORMATCHOICE, IdentificationPanel::OnFormatchoiceSelected )
////@end IdentificationPanel event table entries

END_EVENT_TABLE()


/*
 * IdentificationPanel constructors
 */

IdentificationPanel::IdentificationPanel()
{
    Init();
}

IdentificationPanel::IdentificationPanel( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, pos, size, style);
}


/*
 * IdentificationPanel creator
 */

bool IdentificationPanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin IdentificationPanel creation
    SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end IdentificationPanel creation
    return true;
}


/*
 * IdentificationPanel destructor
 */

IdentificationPanel::~IdentificationPanel()
{
////@begin IdentificationPanel destruction
////@end IdentificationPanel destruction
}


/*
 * Member initialisation
 */

void IdentificationPanel::Init()
{
////@begin IdentificationPanel member initialisation
    m_ID = NULL;
    m_status = NULL;
    m_name = NULL;
    m_emission = NULL;
    m_format = NULL;
    m_issueDate = NULL;
    m_series = NULL;
    m_themes = NULL;
    m_country = NULL;
////@end IdentificationPanel member initialisation
}


/*
 * Control creation for IdentificationPanel
 */

void IdentificationPanel::CreateControls()
{    
////@begin IdentificationPanel content construction
    // Generated by DialogBlocks, Sat 23 Apr 2022 14:51:45 CDT (unregistered)

    IdentificationPanel* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer1, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 2);

    m_ID = new LabeledTextBox( itemPanel1, ID_IDLABELEDTEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer1->Add(m_ID, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer1->Add(itemBoxSizer5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxStaticText* itemStaticText6 = new wxStaticText( itemPanel1, wxID_STATIC, _("Status"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemStaticText6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_statusStrings;
    m_statusStrings.Add(_("None"));
    m_statusStrings.Add(_("Missing"));
    m_statusStrings.Add(_("Ordered"));
    m_statusStrings.Add(_("Own"));
    m_statusStrings.Add(_("Own Variant"));
    m_statusStrings.Add(_("Exclude"));
    m_status = new wxChoice( itemPanel1, ID_STATUSCHOICE, wxDefaultPosition, wxDefaultSize, m_statusStrings, 0 );
    m_status->SetStringSelection(_("None"));
    itemBoxSizer5->Add(m_status, 1, wxGROW|wxALL, 1);

    m_name = new LabeledTextBox( itemPanel1, ID_NAMELABELEDTEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(m_name, 0, wxGROW|wxALL, 2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxALIGN_LEFT|wxALL, 2);

    wxStaticText* itemStaticText1 = new wxStaticText( itemPanel1, wxID_STATIC, _("Emission"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxArrayString m_emissionStrings;
    m_emissionStrings.Add(_("Unknown"));
    m_emissionStrings.Add(_("Commemorative"));
    m_emissionStrings.Add(_("Definitive"));
    m_emissionStrings.Add(_("Hunting Permit"));
    m_emissionStrings.Add(_("Revenue"));
    m_emissionStrings.Add(_("Air Post"));
    m_emissionStrings.Add(_("Air Post Official"));
    m_emissionStrings.Add(_("Air Post Semi-Postal"));
    m_emissionStrings.Add(_("ATM labels"));
    m_emissionStrings.Add(_("Cinderella"));
    m_emissionStrings.Add(_("Illegal"));
    m_emissionStrings.Add(_("Insured Letter"));
    m_emissionStrings.Add(_("Military"));
    m_emissionStrings.Add(_("Newspaper"));
    m_emissionStrings.Add(_("Official"));
    m_emissionStrings.Add(_("Parcel Post"));
    m_emissionStrings.Add(_("Personal Delivery"));
    m_emissionStrings.Add(_("Personalized"));
    m_emissionStrings.Add(_("Postage Due"));
    m_emissionStrings.Add(_("Postal Tax"));
    m_emissionStrings.Add(_("Precancelled"));
    m_emissionStrings.Add(_("Private"));
    m_emissionStrings.Add(_("Regional"));
    m_emissionStrings.Add(_("Registration"));
    m_emissionStrings.Add(_("Semi-Postal"));
    m_emissionStrings.Add(_("War Tax"));
    m_emission = new wxChoice( itemPanel1, ID_EMISSIONCHOICE, wxDefaultPosition, wxDefaultSize, m_emissionStrings, 0 );
    m_emission->SetStringSelection(_("Unknown"));
    itemBoxSizer3->Add(m_emission, 1, wxGROW|wxALL, 1);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer4, 0, wxALIGN_LEFT|wxALL, 2);

    wxStaticText* itemStaticText5 = new wxStaticText( itemPanel1, wxID_STATIC, _("Format"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer4->Add(itemStaticText5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxArrayString m_formatStrings;
    m_formatStrings.Add(_("Unknown"));
    m_formatStrings.Add(_("Stamp"));
    m_formatStrings.Add(_("Se-tenant"));
    m_formatStrings.Add(_("Mini Sheet"));
    m_formatStrings.Add(_("Souvenir Sheet"));
    m_formatStrings.Add(_("Booklet"));
    m_formatStrings.Add(_("Booklet Pane"));
    m_formatStrings.Add(_("Gutter Pair"));
    m_formatStrings.Add(_("Stamp with Attached Label"));
    m_formatStrings.Add(_("Tete-Beche"));
    m_format = new wxChoice( itemPanel1, ID_FORMATCHOICE, wxDefaultPosition, wxDefaultSize, m_formatStrings, 0 );
    m_format->SetStringSelection(_("Unknown"));
    itemBoxSizer4->Add(m_format, 1, wxGROW|wxALL, 1);

    m_issueDate = new LabeledTextBox( itemPanel1, ID_ISSUEDTEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(m_issueDate, 0, wxGROW|wxALL, 2);

    m_series = new LabeledTextBox( itemPanel1, ID_SERIESTEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(m_series, 0, wxGROW|wxALL, 2);

    m_themes = new LabeledTextBox( itemPanel1, ID_THEMETEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(m_themes, 0, wxGROW|wxALL, 2);

    m_country = new LabeledTextBox( itemPanel1, ID_COUNTRYTEXTBOX, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(m_country, 0, wxGROW|wxALL, 2);

////@end IdentificationPanel content construction
}


/*
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_STATUSCHOICE
 */

void IdentificationPanel::OnStatuschoiceSelected( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_STATUSCHOICE in IdentificationPanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_STATUSCHOICE in IdentificationPanel. 
}


/*
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_EMISSIONCHOICE
 */

void IdentificationPanel::OnEmissionchoiceSelected( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_EMISSIONCHOICE in IdentificationPanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_EMISSIONCHOICE in IdentificationPanel. 
}


/*
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_FORMATCHOICE
 */

void IdentificationPanel::OnFormatchoiceSelected( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_FORMATCHOICE in IdentificationPanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_FORMATCHOICE in IdentificationPanel. 
}


/*
 * Should we show tooltips?
 */

bool IdentificationPanel::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap IdentificationPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin IdentificationPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end IdentificationPanel bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon IdentificationPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin IdentificationPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end IdentificationPanel icon retrieval
}

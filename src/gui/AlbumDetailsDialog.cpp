/////////////////////////////////////////////////////////////////////////////
// Name:        AlbumDetailsDialog.cpp
// Purpose:     
// Author:      Eddie Monroe
// Modified by: 
// Created:     Wed 23 Nov 2022 12:01:34 CST
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), Wed 23 Nov 2022 12:01:34 CST

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif
#include "wx/notebook.h"

////  includes
#include "wx/imaglist.h"
////  includes

#include "gui/AlbumDetailsDialog.h"
#include "gui/LabeledTextBox.h"
#include "gui/CatalogTreeCtrl.h"
#include "utils/StampList.h"
#include "Defs.h"
#include "wx/treectrl.h"
#include <wx/fontdlg.h>
#include <wx/fontdata.h>
////  XPM images

////  XPM images


/*
 * AlbumDetailsDialog type definition
 */

IMPLEMENT_DYNAMIC_CLASS( AlbumDetailsDialog, wxDialog )


/*
 * AlbumDetailsDialog event table definition
 */

    BEGIN_EVENT_TABLE( AlbumDetailsDialog, wxDialog )

    ////  AlbumDetailsDialog event table entries
    ////  AlbumDetailsDialog event table entries
    EVT_BUTTON( wxID_CANCEL, AlbumDetailsDialog::OnCancelClick )
    EVT_BUTTON( wxID_OK, AlbumDetailsDialog::OnOkClick )
    EVT_BUTTON( ID_NBRDEFAULTFONTBUTTON, AlbumDetailsDialog::OnNbrDefaultClick )
    EVT_BUTTON( ID_TITLEDEFAULTFONTBUTTON, AlbumDetailsDialog::OnTitleDefaultClick )
    END_EVENT_TABLE( )

    ;
/*
 * AlbumDetailsDialog constructors
 */

AlbumDetailsDialog::AlbumDetailsDialog( )
{
    Init( );
}

AlbumDetailsDialog::AlbumDetailsDialog( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init( );
    Create( parent, id, caption, pos, size, style );
}


/*
 * AlbumDetailsDialog creator
 */

bool AlbumDetailsDialog::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    ////  AlbumDetailsDialog creation
    SetExtraStyle( wxWS_EX_VALIDATE_RECURSIVELY | wxWS_EX_BLOCK_EVENTS );
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls( );
    if ( GetSizer( ) )
    {
        GetSizer( )->SetSizeHints( this );
    }
    Centre( );
    ////  AlbumDetailsDialog creation
    return true;
}


/*
 * AlbumDetailsDialog destructor
 */

AlbumDetailsDialog::~AlbumDetailsDialog( )
{
    ////  AlbumDetailsDialog destruction
    ////  AlbumDetailsDialog destruction
}


/*
 * Member initialisation
 */

void AlbumDetailsDialog::Init( )
{
    ////  AlbumDetailsDialog member initialisation
    m_name = NULL;
    m_height = NULL;
    m_width = NULL;
    m_topMargin = NULL;
    m_bottomMargin = NULL;
    m_rightMargin = NULL;
    m_leftMargin = NULL;
    m_borderSize = NULL;
    m_validate = NULL;
    m_statusList = NULL;
    ////  AlbumDetailsDialog member initialisation
}


/*
 * Control creation for AlbumDetailsDialog
 */

void AlbumDetailsDialog::CreateControls( )
{
    ////  AlbumDetailsDialog content construction
        // Generated by DialogBlocks, Wed 23 Nov 2022 12:01:34 CST (unregistered)

    AlbumDetailsDialog* theDialog = this;

    wxBoxSizer* theDialogVerticalSizer = new wxBoxSizer( wxVERTICAL );
    theDialog->SetSizer( theDialogVerticalSizer );

    wxBoxSizer* theDialogHorizontalSizer = new wxBoxSizer( wxHORIZONTAL );
    theDialogVerticalSizer->Add( theDialogHorizontalSizer, 0, wxGROW | wxALL, 0 );

    //first row
    wxBoxSizer* itemBoxSizer6 = new wxBoxSizer( wxHORIZONTAL );
    theDialogVerticalSizer->Add( itemBoxSizer6, 0, wxGROW | wxALL, 0 );

    m_name = new LabeledTextBox( theDialog, ID_NAMELABELEDTEXTBOX, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER | wxTAB_TRAVERSAL );
    m_name->SetExtraStyle( wxWS_EX_VALIDATE_RECURSIVELY );
    itemBoxSizer6->Add( m_name, 1, wxGROW | wxALL, 5 );

    //default id font
    wxPanel* itemPanel1 = new wxPanel( theDialog, ID_TITLEFONTPANEL, wxDefaultPosition, wxDefaultSize, wxSIMPLE_BORDER | wxTAB_TRAVERSAL );
    itemPanel1->SetExtraStyle( wxWS_EX_VALIDATE_RECURSIVELY );
    theDialogVerticalSizer->Add( itemPanel1, 0, wxGROW | wxALL, 5 );

    wxBoxSizer* itemBoxSizer11 = new wxBoxSizer( wxHORIZONTAL );
    theDialogVerticalSizer->Add( itemBoxSizer11, 0, wxGROW | wxALL, 5 );

    wxStaticText* itemStaticText12 = new wxStaticText( theDialog, wxID_STATIC, _( "Default Catalog Nbr Font" ), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer11->Add( itemStaticText12, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5 );

    m_catNbrFontPicker = new wxFontPickerCtrl( theDialog, 12345,
        *wxNORMAL_FONT, wxDefaultPosition,
        wxDefaultSize, wxFNTP_DEFAULT_STYLE );
    itemBoxSizer11->Add( m_catNbrFontPicker, 5, wxGROW | wxALL, 5 );

    m_catNbrColorPicker = new wxColourPickerCtrl( theDialog, 12346,
        *wxBLACK, wxDefaultPosition,
        wxDefaultSize, wxCLRP_DEFAULT_STYLE );
    itemBoxSizer11->Add( m_catNbrColorPicker, 1, wxGROW | wxALL, 5 );

    wxButton* itemButton13 = new wxButton( theDialog, ID_NBRDEFAULTFONTBUTTON, _( "Default" ), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer11->Add( itemButton13, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5 );

    //default title font
    wxPanel* itemPanel2 = new wxPanel( theDialog, ID_TITLEFONTPANEL, wxDefaultPosition, wxDefaultSize, wxSIMPLE_BORDER | wxTAB_TRAVERSAL );
    itemPanel2->SetExtraStyle( wxWS_EX_VALIDATE_RECURSIVELY );
    theDialogVerticalSizer->Add( itemPanel2, 0, wxGROW | wxALL, 5 );

    wxBoxSizer* itemBoxSizer60 = new wxBoxSizer( wxVERTICAL );
    itemPanel2->SetSizer( itemBoxSizer60 );

    wxBoxSizer* itemBoxSizer110 = new wxBoxSizer( wxHORIZONTAL );
    itemBoxSizer60->Add( itemBoxSizer110, 0, wxGROW | wxALL, 5 );

    wxStaticText* itemStaticText120 = new wxStaticText( itemPanel2, wxID_STATIC, _( "Default Title Font" ), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer110->Add( itemStaticText120, 0, wxGROW | wxALL, 5 );

    m_titleFontPicker = new wxFontPickerCtrl( itemPanel2, 12345,
        *wxNORMAL_FONT, wxDefaultPosition,
        wxDefaultSize, wxFNTP_DEFAULT_STYLE );
    itemBoxSizer110->Add( m_titleFontPicker, 5, wxGROW | wxALL, 5 );

    m_titleColorPicker = new wxColourPickerCtrl( itemPanel2, 12346,
        *wxBLACK, wxDefaultPosition,
        wxDefaultSize, wxCLRP_DEFAULT_STYLE );
    itemBoxSizer110->Add( m_titleColorPicker, 1, wxGROW | wxALL, 5 );

    wxButton* itemButton130 = new wxButton( itemPanel2, ID_TITLEDEFAULTFONTBUTTON, _( "Default" ), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer110->Add( itemButton130, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5 );

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer( wxHORIZONTAL );
    theDialogVerticalSizer->Add( itemBoxSizer4, 0, wxGROW | wxALL, 0 );

    m_height = new LabeledTextBox( theDialog, ID_HEIGHTLABELEDTEXTBOX, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER | wxTAB_TRAVERSAL );
    m_height->SetExtraStyle( wxWS_EX_VALIDATE_RECURSIVELY );
    itemBoxSizer4->Add( m_height, 1, wxGROW | wxALL, 5 );

    m_width = new LabeledTextBox( theDialog, ID_WIDTHLABELEDTEXTBOX, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER | wxTAB_TRAVERSAL );
    m_width->SetExtraStyle( wxWS_EX_VALIDATE_RECURSIVELY );
    itemBoxSizer4->Add( m_width, 1, wxGROW | wxALL, 5 );

    wxBoxSizer* itemBoxSizer7 = new wxBoxSizer( wxHORIZONTAL );
    theDialogVerticalSizer->Add( itemBoxSizer7, 0, wxGROW | wxALL, 0 );

    m_topMargin = new LabeledTextBox( theDialog, ID_TOPMARGINLABELEDTEXTBOX, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER | wxTAB_TRAVERSAL );
    m_topMargin->SetExtraStyle( wxWS_EX_VALIDATE_RECURSIVELY );
    itemBoxSizer7->Add( m_topMargin, 1, wxGROW | wxALL, 5 );

    m_bottomMargin = new LabeledTextBox( theDialog, ID_BOTTOMMARGINLABELEDTEXTBOX, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER | wxTAB_TRAVERSAL );
    m_bottomMargin->SetExtraStyle( wxWS_EX_VALIDATE_RECURSIVELY );
    itemBoxSizer7->Add( m_bottomMargin, 1, wxGROW | wxALL, 5 );

    wxBoxSizer* itemBoxSizer10 = new wxBoxSizer( wxHORIZONTAL );
    theDialogVerticalSizer->Add( itemBoxSizer10, 0, wxGROW | wxALL, 0 );

    m_rightMargin = new LabeledTextBox( theDialog, ID_RIGHTMARGINLABELEDTEXTBOX, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER | wxTAB_TRAVERSAL );
    m_rightMargin->SetExtraStyle( wxWS_EX_VALIDATE_RECURSIVELY );
    itemBoxSizer10->Add( m_rightMargin, 1, wxGROW | wxALL, 5 );

    m_leftMargin = new LabeledTextBox( theDialog, ID_LEFTMARGINLABELEDTEXTBOX, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER | wxTAB_TRAVERSAL );
    m_leftMargin->SetExtraStyle( wxWS_EX_VALIDATE_RECURSIVELY );
    itemBoxSizer10->Add( m_leftMargin, 1, wxGROW | wxALL, 5 );

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer( wxHORIZONTAL );
    theDialogVerticalSizer->Add( itemBoxSizer3, 0, wxGROW | wxALL, 0 );

    m_borderSize = new LabeledTextBox( theDialog, ID_BORDERSIZELABELEDTEXTBOX, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER | wxTAB_TRAVERSAL );
    m_borderSize->SetExtraStyle( wxWS_EX_VALIDATE_RECURSIVELY );
    itemBoxSizer3->Add( m_borderSize, 1, wxGROW | wxALL, 5 );


    wxBoxSizer* itemBoxSizer20 = new wxBoxSizer( wxHORIZONTAL );
    theDialogVerticalSizer->Add( itemBoxSizer20, 0, wxALIGN_CENTER_HORIZONTAL | wxALL, 0 );

    m_catNbrCheckbox = new wxCheckBox( theDialog, ID_CATNBRDEFAULTCHECKBOX, _( "Show Catalog Nbr" ), wxDefaultPosition, wxDefaultSize, 0 );
    m_catNbrCheckbox->SetValue( true );
    itemBoxSizer20->Add( m_catNbrCheckbox, 0, wxALIGN_LEFT | wxALL, 5 );

    m_stampTitleCheckbox = new wxCheckBox( theDialog, ID_STAMPTITLEDEFAULTCHECKBOX, _( "Show StampTitle" ), wxDefaultPosition, wxDefaultSize, 0 );
    m_stampTitleCheckbox->SetValue( true );
    itemBoxSizer20->Add( m_stampTitleCheckbox, 0, wxALIGN_LEFT | wxALL, 5 );

    wxBoxSizer* itemBoxSizer13 = new wxBoxSizer( wxHORIZONTAL );
    theDialogVerticalSizer->Add( itemBoxSizer13, 0, wxALIGN_CENTER_HORIZONTAL | wxALL, 0 );

    wxButton* itemButton14 = new wxButton( theDialog, ID_REFRESHBUTTON, _( "Refresh from Catalog" ), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer13->Add( itemButton14, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5 );

    itemBoxSizer13->Add( 5, 5, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5 );

    m_validate = new wxButton( theDialog, ID_VALIDATEBUTTON, _( "Validate" ), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer13->Add( m_validate, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5 );

    wxBoxSizer* itemBoxSizer17 = new wxBoxSizer( wxHORIZONTAL );
    theDialogVerticalSizer->Add( itemBoxSizer17, 2, wxGROW | wxALL, 5 );

    m_statusList = new wxListCtrl( theDialog, ID_LISTCTRL, wxDefaultPosition, wxSize( 100, 100 ), wxLC_REPORT | wxLC_EDIT_LABELS | wxSIMPLE_BORDER );
    itemBoxSizer17->Add( m_statusList, 2, wxGROW | wxALL, 5 );

    //>>dialog Ctrl buttons
    wxBoxSizer* dialogCtrlButtonSizer = new wxBoxSizer( wxHORIZONTAL );
    theDialogVerticalSizer->Add( dialogCtrlButtonSizer, 0, wxALIGN_CENTER_HORIZONTAL | wxALL, 0 );

    wxButton* cancelButton = new wxButton( theDialog, wxID_CANCEL, _( "Cancel" ), wxDefaultPosition, wxDefaultSize, 0 );
    dialogCtrlButtonSizer->Add( cancelButton, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5 );

    wxButton* okButton = new wxButton( theDialog, wxID_OK, _( "OK" ), wxDefaultPosition, wxDefaultSize, 0 );
    dialogCtrlButtonSizer->Add( okButton, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5 );
    //>>dialog Ctrl buttons  
    ////  AlbumDetailsDialog content construction



    m_name->SetLabel( "Name" );
    m_height->SetLabel( "Page Height" );
    m_width->SetLabel( "Page Name" );
    m_topMargin->SetLabel( "Top Margin" );
    m_bottomMargin->SetLabel( "Bottom Margin" );
    m_rightMargin->SetLabel( "Right Margin" );
    m_leftMargin->SetLabel( "Left Margin" );
    m_borderSize->SetLabel( "Border Size" );

}


/*
 * Should we show tooltips?
 */

bool AlbumDetailsDialog::ShowToolTips( )
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap AlbumDetailsDialog::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////  AlbumDetailsDialog bitmap retrieval
    wxUnusedVar( name );
    return wxNullBitmap;
    ////  AlbumDetailsDialog bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon AlbumDetailsDialog::GetIconResource( const wxString& name )
{
    // Icon retrieval
////  AlbumDetailsDialog icon retrieval
    wxUnusedVar( name );
    return wxNullIcon;
    ////  AlbumDetailsDialog icon retrieval
}

void AlbumDetailsDialog::SetName( wxString name )
{
    m_name->SetValue( name );
    m_name->SetModified( false );
}
void AlbumDetailsDialog::SetPageHeight( wxString height )
{
    m_height->SetValue( height );
    m_height->SetModified( false );
}
void AlbumDetailsDialog::SetPageWidth( wxString width )
{
    m_width->SetValue( width );
    m_width->SetModified( false );
}
void AlbumDetailsDialog::SetTopMargin( wxString topMargin )
{
    m_topMargin->SetValue( topMargin );
    m_topMargin->SetModified( false );
}
void AlbumDetailsDialog::SetBottomMargin( wxString bottomMargin )
{
    m_bottomMargin->SetValue( bottomMargin );
    m_bottomMargin->SetModified( false );
}
void AlbumDetailsDialog::SetLeftMargin( wxString leftMargin )
{
    m_leftMargin->SetValue( leftMargin );
    m_leftMargin->SetModified( false );
}
void AlbumDetailsDialog::SetRightMargin( wxString rightMargin )
{
    m_rightMargin->SetValue( rightMargin );
    m_rightMargin->SetModified( false );
}
void AlbumDetailsDialog::SetBorderSize( wxString borderSize )
{
    m_borderSize->SetValue( borderSize );
    m_borderSize->SetModified( false );
}

wxString AlbumDetailsDialog::GetName( )
{
    return m_name->GetValue( );
}
wxString AlbumDetailsDialog::GetPageHeight( )
{
    return m_height->GetValue( );
}
wxString AlbumDetailsDialog::GetPageWidth( )
{
    return m_width->GetValue( );
}
wxString AlbumDetailsDialog::GetTopMargin( )
{
    return m_topMargin->GetValue( );
}
wxString AlbumDetailsDialog::GetBottomMargin( )
{
    return m_bottomMargin->GetValue( );
}
wxString AlbumDetailsDialog::GetLeftMargin( )
{
    return m_leftMargin->GetValue( );
}
wxString AlbumDetailsDialog::GetRightMargin( )
{
    return m_rightMargin->GetValue( );
}
wxString AlbumDetailsDialog::GetBorderSize( )
{
    return m_borderSize->GetValue( );
}


bool AlbumDetailsDialog::IsNameModified( )
{
    return m_name->IsModified( );
}


bool AlbumDetailsDialog::IsPageHeightModified( )
{
    return m_height->IsModified( );
}
bool AlbumDetailsDialog::IsPageWidthModified( )
{
    return m_width->IsModified( );
}
bool AlbumDetailsDialog::IsTopMarginModified( )
{
    return m_topMargin->IsModified( );
}
bool AlbumDetailsDialog::IsBottomMarginModified( )
{
    return m_bottomMargin->IsModified( );
}
bool AlbumDetailsDialog::IsLeftMarginModified( )
{
    return m_leftMargin->IsModified( );
}
bool AlbumDetailsDialog::IsRightMarginModified( )
{
    return m_rightMargin->IsModified( );
}
bool AlbumDetailsDialog::IsBorderSizeModified( )
{
    return m_borderSize->IsModified( );
}

void AlbumDetailsDialog::SetNameModified( bool state )
{
    m_name->SetModified( state );
}

void AlbumDetailsDialog::SetPageHeightModified( bool state )
{
    m_height->SetModified( state );
}

void AlbumDetailsDialog::SetPageWidthModified( bool state )
{
    m_width->SetModified( state );
}

void AlbumDetailsDialog::SetTopMarginModified( bool state )
{
    m_topMargin->SetModified( state );
}

void AlbumDetailsDialog::SetBottomMarginModified( bool state )
{
    m_bottomMargin->SetModified( state );
}

void AlbumDetailsDialog::SetLeftMarginModified( bool state )
{
    m_leftMargin->SetModified( state );
}

void AlbumDetailsDialog::SetRightMarginModified( bool state )
{
    m_rightMargin->SetModified( state );
}

void AlbumDetailsDialog::SetBorderSizeModified( bool state )
{
    m_borderSize->SetModified( state );
}
void AlbumDetailsDialog::SetShowCatNbr( bool state )
{
    m_catNbrCheckbox->SetValue( state );
}
void AlbumDetailsDialog::SetShowStampTitle( bool state )
{
    m_stampTitleCheckbox->SetValue( state );
}
bool AlbumDetailsDialog::GetShowCatNbr( )
{
    return m_catNbrCheckbox->IsChecked( );
}
bool AlbumDetailsDialog::GetShowStampTitle( )
{
    return m_stampTitleCheckbox->GetValue( );
}
// bool AlbumDetailsDialog::IsShowCatNbrModified( )
// {
//     return m_catNbrCheckbox->IsModified( );
// }
// bool AlbumDetailsDialog::IsShowStampTitleModified( )
// {
//     return m_stampTitleCheckbox->IsModified( );
// }
// void AlbumDetailsDialog::SetShowCatNbrModified( bool state ) 
// {
//     m_catNbrCheckbox->SetModified( state );
// }
// void AlbumDetailsDialog::SetShowStampTitleModified( bool state ) 
// {
//     m_stampTitleCheckbox->SetModified( state );
// }

/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL
 */

void AlbumDetailsDialog::OnCancelClick( wxCommandEvent& event )
{
    // wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL in StampDetailsDialog.
        // Before editing this code, remove the block markers.
    event.Skip( );
    // wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL in StampDetailsDialog. 
}

void AlbumDetailsDialog::OnNbrDefaultClick( wxCommandEvent& event )
{
    wxFontData data;
    wxFont myfont = *wxNORMAL_FONT;
    myfont.SetFamily( wxFONTFAMILY_ROMAN );
    wxFont myfont2 = *wxNORMAL_FONT;
    myfont2.SetFamily( wxFONTFAMILY_ROMAN );

    if ( myfont == myfont2 )
    {
        wxFontFamily family = myfont.GetFamily( );
    }

    wxColour myColor;
    {
        const wxNativeFontInfo* nativeFontInfo = myfont.GetNativeFontInfo( );
        wxFontFamily family = myfont.GetFamily( );
        wxFontWeight weight = myfont.GetWeight( );
        int size = myfont.GetPointSize( );
        wxString face = myfont.GetFaceName( );
        wxString nativeFontInfoDesc = myfont.GetNativeFontInfoDesc( );
        wxString familyName = myfont.GetFamilyString( );
        wxFontStyle style = myfont.GetStyle( );
        myfont2.SetWeight( wxFONTWEIGHT_BOLD );
        if ( myfont == myfont2 )
        {
            family = myfont.GetFamily( );
        }
        myfont2.SetWeight( weight );
        if ( myfont == myfont2 )
        {
            family = myfont.GetFamily( );
        }
    }

    data.SetInitialFont( myfont );
    // data.SetColour(canvasTextColour);
    wxFontDialog dialog( ( wxWindow* )this, data );
    if ( dialog.ShowModal( ) == wxID_OK )
    {
        wxFontData retData = dialog.GetFontData( );
        myfont = retData.GetChosenFont( );
        const wxNativeFontInfo* nativeFontInfo = myfont.GetNativeFontInfo( );
        myColor = retData.GetColour( );
        wxFontFamily family = myfont.GetFamily( );
        wxFontWeight weight = myfont.GetWeight( );
        int size = myfont.GetPointSize( );
        wxString face = myfont.GetFaceName( );
        wxString nativeFontInfoDesc = myfont.GetNativeFontInfoDesc( );
        wxString familyName = myfont.GetFamilyString( );
        wxFontStyle style = myfont.GetStyle( );

    }

    // wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL in StampDetailsDialog.
        // Before editing this code, remove the block markers.
    event.Skip( );
    // wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL in StampDetailsDialog. 
}
void AlbumDetailsDialog::OnTitleDefaultClick( wxCommandEvent& event )
{
    // wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL in StampDetailsDialog.
        // Before editing this code, remove the block markers.
    event.Skip( );
    // wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL in StampDetailsDialog. 
}
/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK
 */

void AlbumDetailsDialog::OnOkClick( wxCommandEvent& event )
{
    // wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK in StampDetailsDialog.
        // Before editing this code, remove the block markers.
    event.Skip( );
    // wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK in StampDetailsDialog. 
}


/////////////////////////////////////////////////////////////////////////////
// Name:        CatalogPanel.cpp
// Purpose:     
// Author:      Eddie Monroe
// Modified by: 
// Created:     Sat 22 Jan 2022 13:01:18 CST
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), Sat 22 Jan 2022 13:01:18 CST

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
#include "gui/CatalogTreeCtrl.h"
#include "wx/imaglist.h"
////@end includes

#include "gui/CatalogPanel.h"
#include <wx/filename.h>

////@begin XPM images
////@end XPM images


/*
 * CatalogPanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CatalogPanel, wxPanel )


/*
 * CatalogPanel event table definition
 */

BEGIN_EVENT_TABLE( CatalogPanel, wxPanel )

////@begin CatalogPanel event table entries
    EVT_TEXT( ID_TEXTCTRL, CatalogPanel::OnTextctrlTextUpdated )
////@end CatalogPanel event table entries

END_EVENT_TABLE()


/*
 * CatalogPanel constructors
 */

CatalogPanel::CatalogPanel()
{
    Init();
}

CatalogPanel::CatalogPanel( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, pos, size, style);
}


/*
 * CatalogPanel creator
 */

bool CatalogPanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CatalogPanel creation
    SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CatalogPanel creation
    return true;
}


/*
 * CatalogPanel destructor
 */

CatalogPanel::~CatalogPanel()
{
////@begin CatalogPanel destruction
////@end CatalogPanel destruction
}


/*
 * Member initialisation
 */

void CatalogPanel::Init()
{
////@begin CatalogPanel member initialisation
    m_title = NULL;
    m_listTree = NULL;
////@end CatalogPanel member initialisation
}


/*
 * Control creation for CatalogPanel
 */

void CatalogPanel::CreateControls()
{    
////@begin CatalogPanel content construction
    // Generated by DialogBlocks, Sat 22 Jan 2022 13:14:49 CST (unregistered)

    CatalogPanel* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer1, 0, wxGROW|wxALL, 0);

    wxStaticText* itemStaticText2 = new wxStaticText( itemPanel1, wxID_STATIC, _("Title"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer1->Add(itemStaticText2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_title = new wxTextCtrl( itemPanel1, ID_TEXTCTRL, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer1->Add(m_title, 0, wxGROW|wxALL, 0);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 2, wxGROW|wxALL, 0);

    m_listTree = new CatalogTreeCtrl( itemPanel1, ID_CATALOGTREECTRL, wxDefaultPosition, wxDefaultSize, wxTR_HAS_BUTTONS |wxTR_FULL_ROW_HIGHLIGHT|wxTR_SINGLE|wxSUNKEN_BORDER|wxTR_DEFAULT_STYLE );
    itemBoxSizer3->Add(m_listTree, 2, wxGROW|wxALL, 0);

////@end CatalogPanel content construction
}


/*
 * Should we show tooltips?
 */

bool CatalogPanel::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap CatalogPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CatalogPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CatalogPanel bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CatalogPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CatalogPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CatalogPanel icon retrieval
}


/*
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TEXTCTRL
 */

void CatalogPanel::OnTextctrlTextUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TEXTCTRL in CatalogPanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TEXTCTRL in CatalogPanel. 
}


void CatalogPanel::SetStamp( Stamp* stamp )
{
    m_stamp = stamp;
//    SetGallery( );
}

void CatalogPanel::UpdateStatus( )
{
}

void CatalogPanel::LoadCatalogTree( )
{
    m_listTree->LoadTree( );
}

void CatalogPanel::ClearCatalogTree( )
{
    m_listTree->DeleteAllItems( );
}

void CatalogPanel::LoadCatalog( )
{
    ClearCatalogTree( );
    LoadCatalogTree( );
}
void CatalogPanel::InitCatalogData()
{
        ClearCatalogTree( );
}

void CatalogPanel::LoadCatalogCSV( wxString csvFilename )
{

    ClearCatalogTree( );
    wxFileName csvFile( csvFilename );
    wxString ext = csvFile.GetExt( );
    if ( !ext.CmpNoCase( "csv" ) )
    {
        wxFileName catalogFile = csvFile;
        catalogFile.SetExt( "xml" );
        GetProject( )->SetCatalogFilename( catalogFile.GetFullPath( ) );
        Catalog::CatalogData* catalogData = Catalog::NewCatalogData( );
        GetProject( )->SetCatalogData( catalogData );

        catalogData->LoadCSV( csvFile.GetFullName() );

        LoadCatalogTree( );
    }
}
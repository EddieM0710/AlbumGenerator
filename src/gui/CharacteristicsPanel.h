/**
 * @file CharacteristicsPanel.h
 * @author Eddie Monroe ( )
 * @brief Inherits from wxPanel. This class manages the widgets that
 * display the physical characteristics
 * of the stamp
 * @version 0.1
 * @date 2021-02-24
 *
 * @copyright Copyright ( c ) 2021
 *
 */


#ifndef _CHARACTERISTICSPANEL_H_
#define _CHARACTERISTICSPANEL_H_

 /*!
  * Includes
  */



#include "gui/GuiDefs.h"
#include "catalog/Entry.h"

  /*!
   * Forward declarations
   */


class LabeledTextBox;


/*!
 * Control identifiers
 */



#define SYMBOL_CHARACTERISTICSPANEL_STYLE wxTAB_TRAVERSAL
#define SYMBOL_CHARACTERISTICSPANEL_TITLE _( "CharacteristicsPanel" )
#define SYMBOL_CHARACTERISTICSPANEL_IDNAME ID_CHARACTERISTICSPANEL
#define SYMBOL_CHARACTERISTICSPANEL_SIZE wxSize( 400, 300 )
#define SYMBOL_CHARACTERISTICSPANEL_POSITION wxDefaultPosition


 /**
  * CharacteristicsPanel class declaration
  *
  * Inherits from wxPanel. This class manages the widgets that
  * display the physical characteristics of the stamp.
  **************************************************/
class CharacteristicsPanel: public wxPanel
{
    DECLARE_DYNAMIC_CLASS( CharacteristicsPanel )
        DECLARE_EVENT_TABLE( )

public:

    enum CharacteristicsPanelGuiDefs {
        ID_FACETEXTBOX = ID_CHARACTERISTICSPANEL + 1,
        ID_CURRENCYTEXTBOX,
        ID_HEIGHTEXTBOX,
        ID_WIDTHTEXTBOX,
        ID_PERFORATIONTEXTBOX,
        ID_WATERMARKEXTBOX,
        ID_GUMTEXTBOX,
        ID_VARIANTTEXTBOX,
        ID_COLORSTEXTBOX,
        ID_PAPERTEXTBOX,
        ID_PRINTINGTEXTBOX,
        ID_PRINTRUNTEXTBOX,
        ID_EXPIRYDATEEXTBOX
    };

    // Constructors

    /**
     * @brief Default Constructor for a new CharacteristicsPanel object
     *
     **************************************************/
    CharacteristicsPanel( void );

    /**
     * @brief Construct a new CharacteristicsPanel object
     *
     * @param  parent	The parent window.
     * @param  id	An identifier for the panel. wxID_ANY is taken to mean a default.
     * @param  pos	The panel position. The value wxDefaultPosition indicates a default position, chosen by either the windowing system or wxWidgets, depending on platform.
     * @param  size	The panel size. The value wxDefaultSize indicates a default size, chosen by either the windowing system or wxWidgets, depending on platform.
     * @param  style	The window style.
     * @see wxPanel.
     **************************************************/
    CharacteristicsPanel( wxWindow* parent,
        wxWindowID id = SYMBOL_CHARACTERISTICSPANEL_IDNAME,
        const wxPoint& pos
        = SYMBOL_CHARACTERISTICSPANEL_POSITION,
        const wxSize& size = SYMBOL_CHARACTERISTICSPANEL_SIZE,
        long style = SYMBOL_CHARACTERISTICSPANEL_STYLE );


    /**
     * @brief  Used for two-step panel construction.
     * Use with default constructor.
     *
     * @param  parent	The parent window.
     * @param  id	An identifier for the panel. wxID_ANY is taken to mean a default.
     * @param  pos	The panel position. The value wxDefaultPosition indicates a default position, chosen by either the windowing system or wxWidgets, depending on platform.
     * @param  size	The panel size. The value wxDefaultSize indicates a default size, chosen by either the windowing system or wxWidgets, depending on platform.
     * @param  style	The window style.
     * @return bool
     *
     **************************************************/
    bool Create( wxWindow* parent,
        wxWindowID id = SYMBOL_CHARACTERISTICSPANEL_IDNAME,
        const wxPoint& pos = SYMBOL_CHARACTERISTICSPANEL_POSITION,
        const wxSize& size = SYMBOL_CHARACTERISTICSPANEL_SIZE,
        long style = SYMBOL_CHARACTERISTICSPANEL_STYLE );


    /**
     * @brief Destroy the Characteristics Panel object
     *
     **************************************************/
    ~CharacteristicsPanel( void );

    /**
     * @brief Initialises member variables
     *
     **************************************************/
    void Init( );

    /**
     * @brief Creates the controls and sizers
     *
     **************************************************/
    void CreateControls( );

    // CharacteristicsPanel member function declarations

    /**
     * @brief Retrieves bitmap resources
     *
     * @param  name ( autogenerated. Dummy. )
     * @return wxBitmap null
     **************************************************/
    wxBitmap GetBitmapResource( const wxString& name );


    /**
     * @brief Get the Icon Resource objectRetrieves icon resources
     *
     * @param  name ( autogenerated. Dummy. )
     * @return wxIcon null
     **************************************************/
    wxIcon GetIconResource( const wxString& name );
    // CharacteristicsPanel member function declarations

   // Should we show tooltips?
    static bool ShowToolTips( );

    // 
    /**
     * @brief Initializes the CharacteristicsPanel with new stamp values
     * @param  stamp :
     */
    void SetStamp( Catalog::Entry* stamp );

    void UpdateStampValue( Catalog::DataTypes dt, LabeledTextBox* textBox );

    void OnTextctrlTextUpdated( wxCommandEvent& event );
    void SetDataEditable( bool val );

    // CharacteristicsPanel member variables
//$    LabeledTextBox* m_faceValue; ///< widget to display Face Value
//$    LabeledTextBox* m_currency;  ///< widget to display Currency
    LabeledTextBox* m_height;  ///< widget to display stamp height
    LabeledTextBox* m_width;  ///< widget to display stamp width
    //$    LabeledTextBox* m_perforation; ///< widget to display perforation count
    //$    LabeledTextBox* m_watermark; ///< widget to display discription of stamp watermark
    //$    LabeledTextBox* m_gum;  ///< widget to display stamp gum
    //$    LabeledTextBox* m_variant; ///< widget to display stamp variant
    //$    LabeledTextBox* m_colors; ///< widget to display colors
    //$    LabeledTextBox* m_paper;  ///< widget to display stamp colors
    //$    LabeledTextBox* m_printing; ///< widget to display printing
    //$    LabeledTextBox* m_printRun;  ///< widget to display print run size
    //$    LabeledTextBox* m_expiryDate; ///< widget to display expiration date of stamp
         // CharacteristicsPanel member variables

        // pointer to current stamp
    Catalog::Entry* m_stamp; ///< pointer to the currently displayed stamp
};

#endif
// _PHYSICALPANEL_H_

/////////////////////////////////////////////////////////////////////////////
// Name:        Row.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     Fri 12 Jan 2024 11:16:43 CST
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), Fri 12 Jan 2024 11:16:43 CST

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "Row.h"

////@begin XPM images
#include "../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/back.xpm"
#include "../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/redo.xpm"
////@end XPM images


/*
 * CompEntry type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CompEntry, wxPanel )


/*
 * CompEntry event table definition
 */

BEGIN_EVENT_TABLE( CompEntry, wxPanel )

////@begin CompEntry event table entries
    EVT_TEXT( ID_TARGETENTRY, CompEntry::OnTargetentryTextUpdated )
    EVT_BUTTON( ID_COPYATTRIBUTE, CompEntry::OnCopyattributeClick )
    EVT_BUTTON( ID_UNDOATTRIBCOPY, CompEntry::OnUndoattribcopyClick )
    EVT_TEXT( ID_MERGEENTRY, CompEntry::OnMergeentryTextUpdated )
////@end CompEntry event table entries

END_EVENT_TABLE()


/*
 * CompEntry constructors
 */

CompEntry::CompEntry()
{
    Init();
}

CompEntry::CompEntry( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, pos, size, style);
}


/*
 * Row creator
 */

bool CompEntry::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CompEntry creation
    SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CompEntry creation
    return true;
}


/*
 * CompEntry destructor
 */

CompEntry::~CompEntry()
{
////@begin CompEntry destruction
////@end CompEntry destruction
}


/*
 * Member initialisation
 */

void CompEntry::Init()
{
////@begin CompEntry member initialisation
    m_typeName = NULL;
    m_targetVal = NULL;
    m_merge = NULL;
    m_undo = NULL;
    m_mergeVal = NULL;
////@end CompEntry member initialisation
}


/*
 * Control creation for Row
 */

void CompEntry::CreateControls()
{    
////@begin CompEntry content construction
    // Generated by DialogBlocks, Fri 12 Jan 2024 15:16:44 CST (unregistered)

    CompEntry* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer1, 1, wxGROW|wxALL, 0);

    m_typeName = new wxStaticText( itemPanel1, wxID_STATIC, _("Static text"), wxDefaultPosition, wxSize(150, -1), wxALIGN_RIGHT );
    itemBoxSizer1->Add(m_typeName, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5);

    m_targetVal = new wxTextCtrl( itemPanel1, ID_TARGETENTRY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer1->Add(m_targetVal, 6, wxGROW|wxALL, 5);

    m_merge = new wxBitmapButton( itemPanel1, ID_COPYATTRIBUTE, itemPanel1->GetBitmapResource(wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/back.xpm")), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxNO_BORDER );
    itemBoxSizer1->Add(m_merge, 1, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_undo = new wxBitmapButton( itemPanel1, ID_UNDOATTRIBCOPY, itemPanel1->GetBitmapResource(wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/redo.xpm")), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW );
    itemBoxSizer1->Add(m_undo, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_mergeVal = new wxTextCtrl( itemPanel1, ID_MERGEENTRY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer1->Add(m_mergeVal, 6, wxGROW|wxALL, 5);

////@end CompEntry content construction
}


/*
 * Should we show tooltips?
 */

bool CompEntry::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap CompEntry::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CompEntry bitmap retrieval
    wxUnusedVar(name);
    if (name == wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/back.xpm"))
    {
        wxBitmap bitmap(back_xpm);
        return bitmap;
    }
    else if (name == wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/redo.xpm"))
    {
        wxBitmap bitmap(redo_xpm);
        return bitmap;
    }
    return wxNullBitmap;
////@end CompEntry bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CompEntry::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CompEntry icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CompEntry icon retrieval
}


/*
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TARGETENTRY
 */

void CompEntry::OnTargetentryTextUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TARGETENTRY in CompEntry.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TARGETENTRY in CompEntry. 
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_COPYATTRIBUTE
 */

void CompEntry::OnCopyattributeClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_COPYATTRIBUTE in CompEntry.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_COPYATTRIBUTE in CompEntry. 
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_UNDOATTRIBCOPY
 */

void CompEntry::OnUndoattribcopyClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_UNDOATTRIBCOPY in CompEntry.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_UNDOATTRIBCOPY in CompEntry. 
}


/*
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_MERGEENTRY
 */

void CompEntry::OnMergeentryTextUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_MERGEENTRY in CompEntry.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_MERGEENTRY in CompEntry. 
}


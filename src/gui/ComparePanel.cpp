/////////////////////////////////////////////////////////////////////////////
// Name:        ComparePanel.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     Fri 12 Jan 2024 09:54:20 CST
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), Fri 12 Jan 2024 09:54:20 CST

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "ComparePanel.h"

////@begin XPM images
#include "../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/down.xpm"
#include "../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/up.xpm"
#include "../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/copy.xpm"
#include "../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/redo.xpm"
#include "../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/back.xpm"
////@end XPM images


/*
 * ComparePanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( ComparePanel, wxPanel )


/*
 * ComparePanel event table definition
 */

BEGIN_EVENT_TABLE( ComparePanel, wxPanel )

////@begin ComparePanel event table entries
    EVT_TEXT( ID_TARGETFILE, ComparePanel::OnTargetfileTextUpdated )
    EVT_TEXT( ID_MERGEFILE, ComparePanel::OnMergefileTextUpdated )
    EVT_BUTTON( ID_NEXTENTRY, ComparePanel::OnNextentryClick )
    EVT_BUTTON( ID_PREVENTRY, ComparePanel::OnPreventryClick )
    EVT_RADIOBUTTON( ID_SHOWDIFFSONLY, ComparePanel::OnShowdiffsonlySelected )
    EVT_RADIOBUTTON( ID_SHOWALL, ComparePanel::OnShowallSelected )
    EVT_BUTTON( ID_COPYALL, ComparePanel::OnCopyallClick )
    EVT_BUTTON( ID_UNDOCOPYALL, ComparePanel::OnUndocopyallClick )
////@end ComparePanel event table entries

END_EVENT_TABLE()


/*
 * ComparePanel constructors
 */

ComparePanel::ComparePanel()
{
    Init();
}

ComparePanel::ComparePanel( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, pos, size, style);
}


/*
 * ComparePanel creator
 */

bool ComparePanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin ComparePanel creation
    SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    Centre();
////@end ComparePanel creation
    return true;
}


/*
 * ComparePanel destructor
 */

ComparePanel::~ComparePanel()
{
////@begin ComparePanel destruction
////@end ComparePanel destruction
}


/*
 * Member initialisation
 */

void ComparePanel::Init()
{
////@begin ComparePanel member initialisation
    m_targetFile = NULL;
    m_typeName = NULL;
    m_typeName = NULL;
    m_targetVal = NULL;
    m_merge = NULL;
    m_undo = NULL;
    m_mergeVal = NULL;
    m_typeName = NULL;
    m_targetVal = NULL;
    m_merge = NULL;
    m_undo = NULL;
    m_mergeVal = NULL;
    m_typeName = NULL;
    m_targetVal = NULL;
    m_merge = NULL;
    m_undo = NULL;
    m_mergeVal = NULL;
////@end ComparePanel member initialisation
}


/*
 * Control creation for ComparePanel
 */

void ComparePanel::CreateControls()
{    
////@begin ComparePanel content construction
    // Generated by DialogBlocks, Fri 12 Jan 2024 15:18:22 CST (unregistered)

    ComparePanel* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer1 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer1);

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer1->Add(itemBoxSizer2, 0, wxGROW|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer2Static = new wxStaticBox(itemPanel1, wxID_ANY, _("Target File"));
    wxStaticBoxSizer* itemStaticBoxSizer2 = new wxStaticBoxSizer(itemStaticBoxSizer2Static, wxHORIZONTAL);
    itemBoxSizer2->Add(itemStaticBoxSizer2, 6, wxGROW|wxLEFT, 5);

    m_targetFile = new wxTextCtrl( itemStaticBoxSizer2->GetStaticBox(), ID_TARGETFILE, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticBoxSizer2->Add(m_targetFile, 6, wxGROW|wxTOP, 5);

    wxStaticBox* itemStaticBoxSizer4Static = new wxStaticBox(itemPanel1, wxID_ANY, _("Merge File"));
    wxStaticBoxSizer* itemStaticBoxSizer4 = new wxStaticBoxSizer(itemStaticBoxSizer4Static, wxHORIZONTAL);
    itemBoxSizer2->Add(itemStaticBoxSizer4, 6, wxGROW|wxLEFT, 5);

    wxTextCtrl* itemTextCtrl5 = new wxTextCtrl( itemStaticBoxSizer4->GetStaticBox(), ID_MERGEFILE, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticBoxSizer4->Add(itemTextCtrl5, 6, wxGROW|wxTOP, 5);

    wxBoxSizer* itemBoxSizer6 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer1->Add(itemBoxSizer6, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer7Static = new wxStaticBox(itemPanel1, wxID_ANY, _("Entry"));
    wxStaticBoxSizer* itemStaticBoxSizer7 = new wxStaticBoxSizer(itemStaticBoxSizer7Static, wxHORIZONTAL);
    itemBoxSizer6->Add(itemStaticBoxSizer7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBitmapButton* itemBitmapButton8 = new wxBitmapButton( itemStaticBoxSizer7->GetStaticBox(), ID_NEXTENTRY, itemPanel1->GetBitmapResource(wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/down.xpm")), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW );
    itemStaticBoxSizer7->Add(itemBitmapButton8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBitmapButton* itemBitmapButton9 = new wxBitmapButton( itemStaticBoxSizer7->GetStaticBox(), ID_PREVENTRY, itemPanel1->GetBitmapResource(wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/up.xpm")), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW );
    itemStaticBoxSizer7->Add(itemBitmapButton9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer10Static = new wxStaticBox(itemPanel1, wxID_ANY, _("Show"));
    wxStaticBoxSizer* itemStaticBoxSizer10 = new wxStaticBoxSizer(itemStaticBoxSizer10Static, wxHORIZONTAL);
    itemBoxSizer6->Add(itemStaticBoxSizer10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxRadioButton* itemRadioButton11 = new wxRadioButton( itemStaticBoxSizer10->GetStaticBox(), ID_SHOWDIFFSONLY, _("Differences"), wxDefaultPosition, wxDefaultSize, 0 );
    itemRadioButton11->SetValue(false);
    itemStaticBoxSizer10->Add(itemRadioButton11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxRadioButton* itemRadioButton12 = new wxRadioButton( itemStaticBoxSizer10->GetStaticBox(), ID_SHOWALL, _("All"), wxDefaultPosition, wxDefaultSize, 0 );
    itemRadioButton12->SetValue(false);
    itemStaticBoxSizer10->Add(itemRadioButton12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer13 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer1->Add(itemBoxSizer13, 0, wxGROW|wxALL, 0);

    m_typeName = new wxStaticText( itemPanel1, wxID_STATIC, _("Attribute"), wxDefaultPosition, wxSize(150, -1), wxALIGN_RIGHT );
    itemBoxSizer13->Add(m_typeName, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5);

    wxStaticText* itemStaticText15 = new wxStaticText( itemPanel1, wxID_STATIC, _("Target"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer13->Add(itemStaticText15, 6, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBitmapButton* itemBitmapButton16 = new wxBitmapButton( itemPanel1, ID_COPYALL, itemPanel1->GetBitmapResource(wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/copy.xpm")), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW );
    if (ComparePanel::ShowToolTips())
        itemBitmapButton16->SetToolTip(_("Merge All"));
    itemBitmapButton16->SetName(wxT("mergeAll"));
    itemBoxSizer13->Add(itemBitmapButton16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBitmapButton* itemBitmapButton1 = new wxBitmapButton( itemPanel1, ID_UNDOCOPYALL, itemPanel1->GetBitmapResource(wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/redo.xpm")), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW );
    if (ComparePanel::ShowToolTips())
        itemBitmapButton1->SetToolTip(_("Undo Merge All"));
    itemBoxSizer13->Add(itemBitmapButton1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText17 = new wxStaticText( itemPanel1, wxID_STATIC, _("Merge"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer13->Add(itemStaticText17, 6, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxScrolledWindow* itemScrolledWindow2 = new wxScrolledWindow( itemPanel1, ID_SCROLLEDWINDOW, wxDefaultPosition, wxSize(100, 100), wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    itemBoxSizer1->Add(itemScrolledWindow2, 1, wxGROW|wxALL, 5);
    itemScrolledWindow2->SetScrollbars(1, 1, 0, 0);
    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxVERTICAL);
    itemScrolledWindow2->SetSizer(itemBoxSizer3);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer3->Add(itemBoxSizer4, 0, wxGROW|wxALL, 0);
    m_typeName = new wxStaticText( itemScrolledWindow2, wxID_STATIC, _("Static text"), wxDefaultPosition, wxSize(150, -1), wxALIGN_RIGHT );
    itemBoxSizer4->Add(m_typeName, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_targetVal = new wxTextCtrl( itemScrolledWindow2, ID_TEXTCTRL5, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer4->Add(m_targetVal, 6, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_merge = new wxBitmapButton( itemScrolledWindow2, ID_BITMAPBUTTON9, itemPanel1->GetBitmapResource(wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/back.xpm")), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxNO_BORDER );
    if (ComparePanel::ShowToolTips())
        m_merge->SetToolTip(_("Copy Attribute to Target"));
    itemBoxSizer4->Add(m_merge, 1, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_undo = new wxBitmapButton( itemScrolledWindow2, ID_BITMAPBUTTON3, itemPanel1->GetBitmapResource(wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/redo.xpm")), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW );
    if (ComparePanel::ShowToolTips())
        m_undo->SetToolTip(_("Undo Attribute Copy"));
    itemBoxSizer4->Add(m_undo, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_mergeVal = new wxTextCtrl( itemScrolledWindow2, ID_TEXTCTRL6, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer4->Add(m_mergeVal, 6, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxBoxSizer* itemBoxSizer12 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer3->Add(itemBoxSizer12, 0, wxGROW|wxALL, 0);
    m_typeName = new wxStaticText( itemScrolledWindow2, wxID_STATIC, _("Static text"), wxDefaultPosition, wxSize(150, -1), wxALIGN_RIGHT );
    itemBoxSizer12->Add(m_typeName, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_targetVal = new wxTextCtrl( itemScrolledWindow2, ID_TEXTCTRL2, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer12->Add(m_targetVal, 6, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_merge = new wxBitmapButton( itemScrolledWindow2, ID_BITMAPBUTTON5, itemPanel1->GetBitmapResource(wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/back.xpm")), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxNO_BORDER );
    if (ComparePanel::ShowToolTips())
        m_merge->SetToolTip(_("Copy Attribute to Target"));
    itemBoxSizer12->Add(m_merge, 1, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_undo = new wxBitmapButton( itemScrolledWindow2, ID_BITMAPBUTTON6, itemPanel1->GetBitmapResource(wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/redo.xpm")), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW );
    if (ComparePanel::ShowToolTips())
        m_undo->SetToolTip(_("Undo Attribute Copy"));
    itemBoxSizer12->Add(m_undo, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_mergeVal = new wxTextCtrl( itemScrolledWindow2, ID_TEXTCTRL3, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer12->Add(m_mergeVal, 6, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxBoxSizer* itemBoxSizer19 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer3->Add(itemBoxSizer19, 0, wxGROW|wxALL, 0);
    m_typeName = new wxStaticText( itemScrolledWindow2, wxID_STATIC, _("Static text"), wxDefaultPosition, wxSize(150, -1), wxALIGN_RIGHT );
    itemBoxSizer19->Add(m_typeName, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_targetVal = new wxTextCtrl( itemScrolledWindow2, ID_TEXTCTRL4, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer19->Add(m_targetVal, 6, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_merge = new wxBitmapButton( itemScrolledWindow2, ID_BITMAPBUTTON7, itemPanel1->GetBitmapResource(wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/back.xpm")), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxNO_BORDER );
    if (ComparePanel::ShowToolTips())
        m_merge->SetToolTip(_("Copy Attribute to Target"));
    itemBoxSizer19->Add(m_merge, 1, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_undo = new wxBitmapButton( itemScrolledWindow2, ID_BITMAPBUTTON8, itemPanel1->GetBitmapResource(wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/redo.xpm")), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW );
    if (ComparePanel::ShowToolTips())
        m_undo->SetToolTip(_("Undo Attribute Copy"));
    itemBoxSizer19->Add(m_undo, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_mergeVal = new wxTextCtrl( itemScrolledWindow2, ID_TEXTCTRL7, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer19->Add(m_mergeVal, 6, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    itemScrolledWindow2->FitInside();

////@end ComparePanel content construction
}


/*
 * Should we show tooltips?
 */

bool ComparePanel::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap ComparePanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin ComparePanel bitmap retrieval
    wxUnusedVar(name);
    if (name == wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/down.xpm"))
    {
        wxBitmap bitmap(down_xpm);
        return bitmap;
    }
    else if (name == wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/up.xpm"))
    {
        wxBitmap bitmap(up_xpm);
        return bitmap;
    }
    else if (name == wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/copy.xpm"))
    {
        wxBitmap bitmap(copy_xpm);
        return bitmap;
    }
    else if (name == wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/redo.xpm"))
    {
        wxBitmap bitmap(redo_xpm);
        return bitmap;
    }
    else if (name == wxT("../../../../sandbox/Applications/wx/wxWidgets-3.2.3/art/back.xpm"))
    {
        wxBitmap bitmap(back_xpm);
        return bitmap;
    }
    return wxNullBitmap;
////@end ComparePanel bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon ComparePanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin ComparePanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end ComparePanel icon retrieval
}


/*
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TARGETFILE
 */

void ComparePanel::OnTargetfileTextUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TARGETFILE in ComparePanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TARGETFILE in ComparePanel. 
}


/*
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_MERGEFILE
 */

void ComparePanel::OnMergefileTextUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_MERGEFILE in ComparePanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_MERGEFILE in ComparePanel. 
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_NEXTENTRY
 */

void ComparePanel::OnNextentryClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_NEXTENTRY in ComparePanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_NEXTENTRY in ComparePanel. 
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_PREVENTRY
 */

void ComparePanel::OnPreventryClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_PREVENTRY in ComparePanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_PREVENTRY in ComparePanel. 
}


/*
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_SHOWDIFFSONLY
 */

void ComparePanel::OnShowdiffsonlySelected( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_SHOWDIFFSONLY in ComparePanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_SHOWDIFFSONLY in ComparePanel. 
}


/*
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_SHOWALL
 */

void ComparePanel::OnShowallSelected( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_SHOWALL in ComparePanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_SHOWALL in ComparePanel. 
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_COPYALL
 */

void ComparePanel::OnCopyallClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_COPYALL in ComparePanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_COPYALL in ComparePanel. 
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_UNDOCOPYALL
 */

void ComparePanel::OnUndocopyallClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_UNDOCOPYALL in ComparePanel.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_UNDOCOPYALL in ComparePanel. 
}


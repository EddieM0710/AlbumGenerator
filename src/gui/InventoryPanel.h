/**
 * @file InventoryPanel.h
 * @author Eddie Monroe ( )
 * @brief
 * @version 0.1
 * @date 2021-02-25
 *
 * @copyright Copyright ( c ) 2021
 * 
 * This file is part of StampTool.
 *
 * StampTool is free software: you can redistribute it and/or modify it under the 
 * terms of the GNU General Public License as published by the Free Software Foundation, 
 * either version 3 of the License, or any later version.
 *
 * StampTool is distributed in the hope that it will be useful, but WITHOUT ANY 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with 
 * StampTool. If not, see <https://www.gnu.org/licenses/>.
 *
 **************************************************/


#ifndef _INVENTORY_H_
#define _INVENTORY_H_

 /*!
  * Includes
  */


#include "wx/grid.h"


#include "catalog/Entry.h"
#include <vector>
#include <wx/dataview.h>
#include "gui/GuiDefs.h"
  /*!
   * Forward declarations
   */


class wxGrid;


/*!
 * Control identifiers
 */


#define ID_INVENTORYGRID ID_INVENTORYPANEL+1
#define SYMBOL_INVENTORYPANEL_STYLE wxTAB_TRAVERSAL
#define SYMBOL_INVENTORYPANEL_TITLE _( "Inventory" )
#define SYMBOL_INVENTORYPANEL_IDNAME ID_INVENTORYPANEL
#define SYMBOL_INVENTORYPANEL_SIZE wxSize( 800, 200 )
#define SYMBOL_INVENTORYPANEL_POSITION wxDefaultPosition


#define ID_INVENTORYLISTCTRL ID_INVENTORYPANEL+2

 /*!
  * InventoryPanel class declaration
  */

class InventoryPanel: public wxPanel
{ 
  DECLARE_DYNAMIC_CLASS( InventoryPanel )
  DECLARE_EVENT_TABLE( )

public:
  // Constructors
  /**
   * @brief Default Constructor a new InventoryPanel object
   * @details Must be used in conjunction with Create.
   *
   **************************************************/
  InventoryPanel( );

  /**
   * @brief Construct a new InventoryPanel object
   *
   * @param  parent	The parent window.
   * @param  id	An identifier for the panel. wxID_ANY is taken to mean a default.
   * @param  pos	The panel position. The value wxDefaultPosition indicates a default position, chosen by either the windowing system or wxWidgets, depending on platform.
   * @param  size	The panel size. The value wxDefaultSize indicates a default size, chosen by either the windowing system or wxWidgets, depending on platform.
   * @param  style	The window style.
   * @see wxPanel.
   **************************************************/
  InventoryPanel( wxWindow* parent, 
    wxWindowID id = SYMBOL_INVENTORYPANEL_IDNAME, 
    const wxPoint& pos = SYMBOL_INVENTORYPANEL_POSITION, 
    const wxSize& size = SYMBOL_INVENTORYPANEL_SIZE, 
    long style = SYMBOL_INVENTORYPANEL_STYLE );

  /**
   * @brief  Used for two-step panel construction.
   * Use with default constructor.
   *
   * @param  parent	The parent window.
   * @param  id	An identifier for the panel. wxID_ANY is taken to mean a default.
   * @param  pos	The panel position. The value wxDefaultPosition indicates a default position, chosen by either the windowing system or wxWidgets, depending on platform.
   * @param  size	The panel size. The value wxDefaultSize indicates a default size, chosen by either the windowing system or wxWidgets, depending on platform.
   * @param  style	The window style.
   * @return bool
   *
   **************************************************/
  bool Create( wxWindow* parent, wxWindowID id = SYMBOL_INVENTORYPANEL_IDNAME, 
    const wxPoint& pos = SYMBOL_INVENTORYPANEL_POSITION, 
    const wxSize& size = SYMBOL_INVENTORYPANEL_SIZE, 
    long style = SYMBOL_INVENTORYPANEL_STYLE );

  // Destructor
  ~InventoryPanel( );

  /**
   * @brief   Initialises member variables
   *
   **************************************************/
  void Init( );

  /**
   * @brief Creates the controls and sizers
   *
   **************************************************/
  void CreateControls( );


  /**
   * @brief wxEVT_CONTEXT_MENU event handler for ID_INVENTORYPANEL
   *
   * @param event  Contains information about context menu events
   **************************************************/
  void OnContextMenu( wxContextMenuEvent& event );


  /**
   * @brief wxEVT_GRID_CELL_CHANGED event handler for ID_GRID
   *
   * @param event   Contains information about grid events
   **************************************************/
  void OnCellChanged( wxGridEvent& event );


  /**
   * @brief Retrieves bitmap resources
   *
   * @param  name ( autogenerated. Dummy. )
   * @return wxBitmap null
   **************************************************/
  wxBitmap GetBitmapResource( const wxString& name );

  /**
   * @brief Get the Icon Resource objectRetrieves icon resources
   *
   * @param  name ( autogenerated. Dummy. )
   * @return wxIcon null
   **************************************************/
  wxIcon GetIconResource( const wxString& name );
  // InventoryPanel member function declarations

 /**
  * @brief Should we show tooltips?
  *
  * @return bool ( autogenerated. Dummy. Always true )
  **************************************************/
  static bool ShowToolTips( );

  /**
   * @brief Load the grid with the inventory items
   *
   **************************************************/
  void ShowStamp( );

  /**
   * @brief Set the Stamp object
   *
   * @param stamp  set the currently displayed stamp to this
   **************************************************/
  void SetStamp( Catalog::Entry* stamp );
  void SetDataEditable( bool val );

  /**
   * @brief shows context menu to add or remove inventory entries
   *
   * @param event   Contains information about command events
   **************************************************/
  void OnContextPopup( wxCommandEvent& event );

  /**
   * @brief Add an intery to the wxGrid
   *
   * @return int index of the new row
   **************************************************/
  int AddRow( );

  /**
   * @brief creates a new empty row in the grid
   *
   * @param row Row to updata
   **************************************************/
  void InitRow( int row );

  /**
   * @brief gets the item from the inventory list and populates the columns with it
   *
   * @param row index of row to populate
   **************************************************/
  void ShowRow( int row );

private:

  wxGrid* m_grid;  ///< wxGrid to display item entries
  Catalog::Entry* m_stamp; ///< pointer to the currently displayed stamp 
  std::vector<wxXmlNode*> m_specimenList;  ///< list containing each of the entries
};

#endif
// _INVENTORY_H_

/*
 * @file  PageDetailsDialog.cpp
 * @author Eddie Monroe
 * @brief
 * @version 0.1
 * @date 2022-04-29
 *
 * @copyright Copyright ( c ) 2022
 *
 * This file is part of StampTool.
 *
 * StampTool is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software Foundation, 
 * either version 3 of the License, or any later version.
 *
 * StampTool is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * StampTool. If not, see <https://www.gnu.org/licenses/>.
 */// Generated by DialogBlocks ( unregistered ), Mon 02 Jan 2023 08:34:03 CST

 // For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////  includes
#include "wx/imaglist.h"
////  includes
#include "wx/notebook.h"

#include "PageDetailsDialog.h"
#include "gui/LabeledTextBox.h"


/*
 * PageDetailsDialog type definition
 */

IMPLEMENT_DYNAMIC_CLASS( PageDetailsDialog, wxDialog )


/*
 * PageDetailsDialog event table definition
 */

    BEGIN_EVENT_TABLE( PageDetailsDialog, wxDialog )

    ////  PageDetailsDialog event table entries
    ////  PageDetailsDialog event table entries

    EVT_BUTTON( wxID_OK, PageDetailsDialog::OnOkClick )

    END_EVENT_TABLE( )

    ;
/*
 * PageDetailsDialog constructors
 */

PageDetailsDialog::PageDetailsDialog( )
{ 
    Init( );
}

PageDetailsDialog::PageDetailsDialog( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{ 
    Init( );
    Create( parent, id, caption, pos, size, style );
}


/*
 * PageDetailsDialog creator
 */

bool PageDetailsDialog::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{ 
    ////  PageDetailsDialog creation
    SetExtraStyle( wxWS_EX_VALIDATE_RECURSIVELY | wxWS_EX_BLOCK_EVENTS );
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls( );
    if ( GetSizer( ) )
    { 
        GetSizer( )->SetSizeHints( this );
    }
    Centre( );
    ////  PageDetailsDialog creation
    return true;
}


/*
 * PageDetailsDialog destructor
 */

PageDetailsDialog::~PageDetailsDialog( )
{ 
    ////  PageDetailsDialog destruction
    ////  PageDetailsDialog destruction
}


/*
 * Member initialisation
 */

void PageDetailsDialog::Init( )
{ 
    ////  PageDetailsDialog member initialisation
    m_name = NULL;
    m_titleCheckbox = NULL;
    m_frameCheckbox = NULL;
    m_name = NULL;
    m_titleCheckbox = NULL;
    m_statusList = NULL;
    ////  PageDetailsDialog member initialisation
}


/*
 * Control creation for PageDetailsDialog
 */

void PageDetailsDialog::CreateControls( )
{ 
    ////  PageDetailsDialog content construction
        // Generated by DialogBlocks, Mon 02 Jan 2023 08:35:52 CST ( unregistered )

    PageDetailsDialog* theDialog = this;

    wxBoxSizer* theDialogVerticalSizer = new wxBoxSizer( wxVERTICAL );
    theDialog->SetSizer( theDialogVerticalSizer );

    wxBoxSizer* theDialogHorizontalSizer = new wxBoxSizer( wxHORIZONTAL );
    theDialogVerticalSizer->Add( theDialogHorizontalSizer, 1, wxGROW | wxALL, 0 );

    //     wxNotebook* itemNotebook3 = new wxNotebook( theDialog, ID_NOTEBOOK, wxDefaultPosition, wxDefaultSize, wxBK_DEFAULT );

    // //>> details panel
    //     wxPanel* theDialog = new wxPanel( itemNotebook3, ID_DETAILSPANEL, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER | wxTAB_TRAVERSAL );
    //     theDialog->SetExtraStyle( wxWS_EX_VALIDATE_RECURSIVELY );

    wxBoxSizer* detailsVerticalSizer = new wxBoxSizer( wxVERTICAL );
    theDialog->SetSizer( detailsVerticalSizer );

    //>> first row ctrls
    wxBoxSizer* firstRowHorizontalSizer = new wxBoxSizer( wxHORIZONTAL );
    detailsVerticalSizer->Add( firstRowHorizontalSizer, 0, wxGROW | wxALL, 0 );

    m_name = new LabeledTextBox( theDialog, ID_PAGENAMELABELEDTEXTBOX, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER | wxTAB_TRAVERSAL );
    m_name->SetExtraStyle( wxWS_EX_VALIDATE_RECURSIVELY );
    firstRowHorizontalSizer->Add( m_name, 1, wxGROW | wxALL, 5 );


    m_titleCheckbox = new wxCheckBox( theDialog, ID_SHOWTITLECHECKBOX, _( "Show Title" ), wxDefaultPosition, wxDefaultSize, 0 );
    m_titleCheckbox->SetValue( false );
    firstRowHorizontalSizer->Add( m_titleCheckbox, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5 );

    m_frameCheckbox = new wxCheckBox( theDialog, ID_SHOWFRAMECHECKBOX, _( "Show Frame" ), wxDefaultPosition, wxDefaultSize, 0 );
    m_frameCheckbox->SetValue( false );
    firstRowHorizontalSizer->Add( m_frameCheckbox, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5 );
    //>> first row ctrls

    //>>second row ctrls
    wxBoxSizer* SecondRowHorizontalSizer = new wxBoxSizer( wxHORIZONTAL );
    detailsVerticalSizer->Add( SecondRowHorizontalSizer, 0, wxGROW | wxALL, 5 );

    wxStaticText* itemStaticText12 = new wxStaticText( theDialog, ID_TITLEFONTPICKERSTATIC, _( "Title Font Picker" ), wxDefaultPosition, wxDefaultSize, 0 );
    SecondRowHorizontalSizer->Add( itemStaticText12, 1, wxALIGN_CENTER_VERTICAL | wxALL, 5 );

    wxButton* itemButton13 = new wxButton( theDialog, ID_DEFAULTBUTTON, _( "Default" ), wxDefaultPosition, wxDefaultSize, 0 );
    SecondRowHorizontalSizer->Add( itemButton13, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5 );
    //<<second row ctrls

    //>>error list ctrls
    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer( wxHORIZONTAL );
    detailsVerticalSizer->Add( itemBoxSizer3, 2, wxGROW | wxALL, 0 );

    m_statusList = new wxListCtrl( theDialog, ID_ERRORLISTCTRL, wxDefaultPosition, wxSize( 100, 100 ), wxLC_REPORT | wxLC_EDIT_LABELS | wxSIMPLE_BORDER );
    itemBoxSizer3->Add( m_statusList, 2, wxGROW | wxALL, 0 );

    //<<error list ctrls


    //>>dialog Ctrl buttons
    wxBoxSizer* dialogCtrlButtonSizer = new wxBoxSizer( wxHORIZONTAL );
    detailsVerticalSizer->Add( dialogCtrlButtonSizer, 0, wxALIGN_CENTER_HORIZONTAL | wxALL, 0 );

    wxButton* itemButton9 = new wxButton( theDialog, wxID_CANCEL, _( "Cancel" ), wxDefaultPosition, wxDefaultSize, 0 );
    dialogCtrlButtonSizer->Add( itemButton9, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5 );

    wxButton* itemButton10 = new wxButton( theDialog, wxID_OK, _( "OK" ), wxDefaultPosition, wxDefaultSize, 0 );
    dialogCtrlButtonSizer->Add( itemButton10, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5 );
    //>>dialog Ctrl buttons    
    ////  PageDetailsDialog content construction
}


/*
 * Should we show tooltips?
 */

bool PageDetailsDialog::ShowToolTips( )
{ 
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap PageDetailsDialog::GetBitmapResource( const wxString& name )
{ 
    // Bitmap retrieval
    ////  PageDetailsDialog bitmap retrieval
    wxUnusedVar( name );
    return wxNullBitmap;
    ////  PageDetailsDialog bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon PageDetailsDialog::GetIconResource( const wxString& name )
{ 
    // Icon retrieval
////  PageDetailsDialog icon retrieval
    wxUnusedVar( name );
    return wxNullIcon;
    ////  PageDetailsDialog icon retrieval
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK
 */

void PageDetailsDialog::OnOkClick( wxCommandEvent& event )
{ 
    // wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK in PageDetailsDialog.
        // Before editing this code, remove the block markers.
    event.Skip( );
    // wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK in PageDetailsDialog. 
}

void PageDetailsDialog::SetNameModified( bool state ) { m_name->SetModified( state ); };
void PageDetailsDialog::SetDesignTreeID( wxTreeItemId id ) { if ( id.IsOk( ) ) m_designTreeID = id; };
bool PageDetailsDialog::IsNameModified( ) { return m_name->IsModified( ); };
void PageDetailsDialog::SetShowTitle( bool state ) { m_titleCheckbox->SetValue( state ); };
void PageDetailsDialog::SetShowFrame( bool state ) { m_frameCheckbox->SetValue( state ); };
bool PageDetailsDialog::GetShowTitle( ) { return m_titleCheckbox->IsChecked( ); };;
bool PageDetailsDialog::GetShowFrame( ) { return m_frameCheckbox->IsChecked( ); };
